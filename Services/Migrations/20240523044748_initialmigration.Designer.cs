// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Services.MyDbContext;

#nullable disable

namespace Services.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20240523044748_initialmigration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Appointment", b =>
                {
                    b.Property<int>("Id_Appoitment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Appoitment"));

                    b.Property<int?>("AppointmentTypeId_Appoitment_Type")
                        .HasColumnType("int");

                    b.Property<int?>("Clinic_BranchId_ClinicBranch")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Id_Appoitment_Type")
                        .HasColumnType("int");

                    b.Property<int?>("Id_ClinicBranch")
                        .HasColumnType("int");

                    b.Property<int?>("Id_User")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId_User")
                        .HasColumnType("int");

                    b.HasKey("Id_Appoitment");

                    b.HasIndex("AppointmentTypeId_Appoitment_Type");

                    b.HasIndex("Clinic_BranchId_ClinicBranch");

                    b.HasIndex("UserId_User");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Entities.AppointmentType", b =>
                {
                    b.Property<int>("Id_Appoitment_Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Appoitment_Type"));

                    b.Property<string>("Name_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Appoitment_Type");

                    b.ToTable("AppointmentTypes");

                    b.HasData(
                        new
                        {
                            Id_Appoitment_Type = 2,
                            Name_type = "General Medicine"
                        },
                        new
                        {
                            Id_Appoitment_Type = 3,
                            Name_type = "Dentistry"
                        },
                        new
                        {
                            Id_Appoitment_Type = 4,
                            Name_type = "Pediatrics"
                        },
                        new
                        {
                            Id_Appoitment_Type = 5,
                            Name_type = "Neurology"
                        });
                });

            modelBuilder.Entity("Entities.Clinic_Branch", b =>
                {
                    b.Property<int>("Id_ClinicBranch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_ClinicBranch"));

                    b.Property<string>("Branch_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_ClinicBranch");

                    b.ToTable("Clinic_Branches");

                    b.HasData(
                        new
                        {
                            Id_ClinicBranch = 2,
                            Branch_Name = "Under Loch Ness"
                        },
                        new
                        {
                            Id_ClinicBranch = 3,
                            Branch_Name = "San Martin"
                        },
                        new
                        {
                            Id_ClinicBranch = 4,
                            Branch_Name = "Brasilito"
                        });
                });

            modelBuilder.Entity("Entities.Rol", b =>
                {
                    b.Property<int>("Id_Rol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_Rol"));

                    b.Property<string>("Name_Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_Rol");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id_Rol = 1,
                            Name_Rol = "USER"
                        },
                        new
                        {
                            Id_Rol = 2,
                            Name_Rol = "ADMIN"
                        });
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<int>("Id_User")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_User"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id_Rol")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("User_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id_User");

                    b.HasIndex("Id_Rol");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Appointment", b =>
                {
                    b.HasOne("Entities.AppointmentType", "AppointmentType")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTypeId_Appoitment_Type")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.Clinic_Branch", "Clinic_Branch")
                        .WithMany("Appointments")
                        .HasForeignKey("Clinic_BranchId_ClinicBranch")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppointmentType");

                    b.Navigation("Clinic_Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Rol", "Rol")
                        .WithMany("Users")
                        .HasForeignKey("Id_Rol");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Entities.AppointmentType", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Entities.Clinic_Branch", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Entities.Rol", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
